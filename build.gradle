// project-wide `build.gradle`

plugins {
    id 'com.android.application' version '8.1.0' apply false
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin' version '2.0.1' apply false
}

// Build Configurations
project.ext.set('archiveBuildTypes', ['release', 'debug'])

// Version Settings, loaded from version.properties
def version = new Properties()
version.load(new FileInputStream(rootProject.file('version.properties')))
project.ext.set('applicationId',       version['applicationId'])
project.ext.set('versionName',         version['versionName'])
project.ext.set('versionCode',         new Integer(version['versionCode']))
project.ext.set('compileSdkVersion',   new Integer(version['compileSdkVersion']))
project.ext.set('targetSdkVersion',    new Integer(version['targetSdkVersion']))
project.ext.set('minSdkVersion',       new Integer(version['minSdkVersion']))

allprojects {

    // when projects were evaluated
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xmaxerrs" << "2000" << "-Xmaxwarns" << "2000"
                options.compilerArgs << "-Xlint:unchecked" << '-Xlint:deprecation'
                // << "-Xlint:-cast" << "-Xlint:all"
            }
        }
    }
}

// rootProject > clean
tasks.register('clean', Delete) {

    // delete build directories
    delete rootProject.buildDir
    delete project.buildDir

    // when task clean has finished
    doLast {

        // then recreate APK output directories
        mkdir("${project.buildDir}/outputs/apk")
        mkdir("${project.buildDir}/outputs/apk/debug")
        mkdir("${project.buildDir}/outputs/apk/release")
    }
}
